#importing Libraries
import numpy as np
import pandas as pd
import difflib  # to get the closest spelling match given by the user
from sklearn.feature_extraction.text import TfidfVectorizer #text to vector conversion
from sklearn.metrics.pairwise import cosine_similarity # used for comparision using similarity
# data loading and preprocessing
movies_data = pd.read_csv('/content/movies.csv') # I've used google colabs and copied the path of the file directly. I've uploaded the CSV file in github too
movies_data.head()
movies_data.shape #identifying number of rows and columns
select_features = ['genres', 'keywords','tagline','cast','director'] # selecting the relevant features for recommendation
for feature in select_features:
  movies_data[feature] = movies_data[feature].fillna(' ') #Replacing empty rows with null string
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director'] # combining all the required features
vectorizer = TfidfVectorizer() #converting text to vectors
feature_vectors = vectorizer.fit_transform(combined_features)
similarity = cosine_similarity(feature_vectors) #Cosine similarity 
# print(similarity.shape) - comparing with 4803 entities : to check
list_all = movies_data['title'].tolist()
movie_name = input('Enter your favourite name: ')
all_close_match = difflib.get_close_matches(movie_name, list_all) # to get a close match 
#print(all_close_match)
close_match = all_close_match[0] #considering only the first element as the close match
#print(close_match) : to check
movie_index = movies_data[movies_data.title == close_match]['index'].values[0] # getting movie index by comparing with titles of all the movies
#print(movie_index) : to check
similarity_score = list(enumerate(similarity[movie_index])) # similarity scores are obtained for all the movie titles when compared with the close match
sort_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)  # increasing order of similarity score
#print(sort_similar_movies) : to check
print('Movie Recommendations are:')
i = 1
for movie in sort_similar_movies:
  index = movie[0]
  title_index = movies_data[movies_data.index==index]['title'].values[0] # getting movie titles from index values
  if (i<30):
    print(i, '.',title_index)
    i+=1
